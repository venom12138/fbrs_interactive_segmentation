# -*- coding: utf-8 -*-
"""colab_test_any_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/saic-vul/fbrs_interactive_segmentation/blob/master/notebooks/colab_test_any_model.ipynb

### Clone repository, download models and data, install necessary packages
"""
"""### Imports"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt

import sys
import torch
import numpy as np
import os

sys.path.insert(0, './')

from isegm.utils import vis, exp
from isegm.inference import utils
from isegm.inference.evaluation import evaluate_dataset, evaluate_sample
from tqdm import tqdm


MODEL_NAME = "resnet34_dh128_sbd"
URL_PREFIX = "https://github.com/saic-vul/fbrs_interactive_segmentation/releases/download/v1.0"
DATA_FOLDER = "./fbrs_interactive_segmentation/datasets" 
WEIGHTS_FOLDER = "./fbrs_interactive_segmentation/weights"
WEIGHTS_URL = f"{URL_PREFIX}/{MODEL_NAME}.pth"
device = torch.device('cuda:0')
cfg = exp.load_config_file('./config.yml', return_edict=True)

"""### Init dataset"""

# Possible choices: 'GrabCut', 'Berkeley', 'DAVIS', 'COCO_MVal', 'SBD'
DATASET = 'EPIC-Kitchen'
# DATASET = 'GrabCut'
dataset = utils.get_dataset(DATASET, cfg)

"""### Init model"""

from isegm.inference.predictors import get_predictor

EVAL_MAX_CLICKS = 20
MODEL_THRESH = 0.49

checkpoint_path = utils.find_checkpoint(cfg.INTERACTIVE_MODELS_PATH, MODEL_NAME)
model = utils.load_is_model(checkpoint_path, device)

# Possible choices: 'NoBRS', 'f-BRS-A', 'f-BRS-B', 'f-BRS-C', 'RGB-BRS', 'DistMap-BRS'
brs_mode = 'f-BRS-B'
predictor = get_predictor(model, brs_mode, device, prob_thresh=MODEL_THRESH)

### My Dataset Evaluation9
TARGET_IOU = 0.95


for index in tqdm(range(len(dataset)), leave=False):
    sample = dataset.get_sample(index)
    item = dataset[index]
    pos_clicks = sample['pos_clicks']
    neg_clicks = sample['neg_clicks']
    clicks_list, _, pred = evaluate_sample(item['images'], None, predictor, pred_thr=MODEL_THRESH, 
                                        max_iou_thr=TARGET_IOU, max_clicks=EVAL_MAX_CLICKS, 
                                        pos_clicks=pos_clicks, neg_clicks=neg_clicks)
    pred_mask = pred > MODEL_THRESH
    draw = vis.draw_with_blend_and_clicks(sample['image'], mask=pred_mask, clicks_list=clicks_list)
    mask = np.array(255 * pred_mask[:, :, np.newaxis].repeat(3, axis=2), dtype = np.uint8) # 
    if not os.path.isdir(f"./datasets/EPIC-Kitchen/P04/first_last_draw/P04_01/{sample['img_info']['uid']}"):
        os.makedirs(f"./datasets/EPIC-Kitchen/P04/first_last_draw/P04_01/{sample['img_info']['uid']}")
    if not os.path.isdir(f"./datasets/EPIC-Kitchen/P04/first_last_masks/P04_01/{sample['img_info']['uid']}"):
        os.makedirs(f"./datasets/EPIC-Kitchen/P04/first_last_masks/P04_01/{sample['img_info']['uid']}")
    plt.imsave(f"./datasets/EPIC-Kitchen/P04/first_last_draw/P04_01/{sample['img_info']['uid']}/{sample['img_info']['img_name']}", draw)
    plt.imsave(f"./datasets/EPIC-Kitchen/P04/first_last_masks/P04_01/{sample['img_info']['uid']}/{sample['img_info']['img_name']}", mask)


"""### Dataset evaluation"""
# TARGET_IOU = 0.9
# # 这里是根据mask的轮廓模拟了一个clicker点击
# all_ious, elapsed_time = evaluate_dataset(dataset, predictor, pred_thr=MODEL_THRESH, 
#                                           max_iou_thr=TARGET_IOU, max_clicks=EVAL_MAX_CLICKS)
# mean_spc, mean_spi = utils.get_time_metrics(all_ious, elapsed_time)
# noc_list, over_max_list = utils.compute_noc_metric(all_ious,
#                                                   iou_thrs=[0.8, 0.85, 0.9],
#                                                   max_clicks=EVAL_MAX_CLICKS)

# header, table_row = utils.get_results_table(noc_list, over_max_list, brs_mode, DATASET,
#                                             mean_spc, elapsed_time, EVAL_MAX_CLICKS)
# print(header)
# print(table_row)
# print('table row done')

# """### Single sample eval"""

# sample_id = 12
# TARGET_IOU = 0.95

# sample = dataset.get_sample(sample_id)
# gt_mask = sample['instances_mask']
# image = dataset[sample_id]['images']

# clicks_list, ious_arr, pred = evaluate_sample(image, gt_mask, predictor, 
#                                               pred_thr=MODEL_THRESH, 
#                                               max_iou_thr=TARGET_IOU, max_clicks=EVAL_MAX_CLICKS)

# pred_mask = pred > MODEL_THRESH
# draw = vis.draw_with_blend_and_clicks(sample['image'], mask=pred_mask, clicks_list=clicks_list)
# draw = np.concatenate((draw,
#     255 * pred_mask[:, :, np.newaxis].repeat(3, axis=2),
#     255 * (gt_mask > 0)[:, :, np.newaxis].repeat(3, axis=2)
# ), axis=1)
# plt.imsave(f"draw.jpg", draw)
# print(ious_arr)

# plt.figure(figsize=(20, 30))
# plt.imshow(draw)
# plt.show()